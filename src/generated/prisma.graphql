type Address {
  id: ID!
  streetAddress: String!
  city: String!
  province: String!
  postalCode: String!
  country: String!
  resident: Profile
}

type AddressConnection {
  pageInfo: PageInfo!
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  streetAddress: String!
  city: String!
  province: String!
  postalCode: String!
  country: String!
  resident: ProfileCreateOneWithoutAddressInput
}

input AddressCreateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

input AddressCreateOneWithoutResidentInput {
  create: AddressCreateWithoutResidentInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutResidentInput {
  id: ID
  streetAddress: String!
  city: String!
  province: String!
  postalCode: String!
  country: String!
}

type AddressEdge {
  node: Address!
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  streetAddress_ASC
  streetAddress_DESC
  city_ASC
  city_DESC
  province_ASC
  province_DESC
  postalCode_ASC
  postalCode_DESC
  country_ASC
  country_DESC
}

type AddressPreviousValues {
  id: ID!
  streetAddress: String!
  city: String!
  province: String!
  postalCode: String!
  country: String!
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
  AND: [AddressSubscriptionWhereInput!]
  OR: [AddressSubscriptionWhereInput!]
  NOT: [AddressSubscriptionWhereInput!]
}

input AddressUpdateDataInput {
  streetAddress: String
  city: String
  province: String
  postalCode: String
  country: String
  resident: ProfileUpdateOneWithoutAddressInput
}

input AddressUpdateInput {
  streetAddress: String
  city: String
  province: String
  postalCode: String
  country: String
  resident: ProfileUpdateOneWithoutAddressInput
}

input AddressUpdateManyMutationInput {
  streetAddress: String
  city: String
  province: String
  postalCode: String
  country: String
}

input AddressUpdateOneInput {
  create: AddressCreateInput
  update: AddressUpdateDataInput
  upsert: AddressUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: AddressWhereUniqueInput
}

input AddressUpdateOneWithoutResidentInput {
  create: AddressCreateWithoutResidentInput
  update: AddressUpdateWithoutResidentDataInput
  upsert: AddressUpsertWithoutResidentInput
  delete: Boolean
  disconnect: Boolean
  connect: AddressWhereUniqueInput
}

input AddressUpdateWithoutResidentDataInput {
  streetAddress: String
  city: String
  province: String
  postalCode: String
  country: String
}

input AddressUpsertNestedInput {
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

input AddressUpsertWithoutResidentInput {
  update: AddressUpdateWithoutResidentDataInput!
  create: AddressCreateWithoutResidentInput!
}

input AddressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  streetAddress: String
  streetAddress_not: String
  streetAddress_in: [String!]
  streetAddress_not_in: [String!]
  streetAddress_lt: String
  streetAddress_lte: String
  streetAddress_gt: String
  streetAddress_gte: String
  streetAddress_contains: String
  streetAddress_not_contains: String
  streetAddress_starts_with: String
  streetAddress_not_starts_with: String
  streetAddress_ends_with: String
  streetAddress_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  province: String
  province_not: String
  province_in: [String!]
  province_not_in: [String!]
  province_lt: String
  province_lte: String
  province_gt: String
  province_gte: String
  province_contains: String
  province_not_contains: String
  province_starts_with: String
  province_not_starts_with: String
  province_ends_with: String
  province_not_ends_with: String
  postalCode: String
  postalCode_not: String
  postalCode_in: [String!]
  postalCode_not_in: [String!]
  postalCode_lt: String
  postalCode_lte: String
  postalCode_gt: String
  postalCode_gte: String
  postalCode_contains: String
  postalCode_not_contains: String
  postalCode_starts_with: String
  postalCode_not_starts_with: String
  postalCode_ends_with: String
  postalCode_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  resident: ProfileWhereInput
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateApproval {
  count: Int!
}

type AggregateAvatar {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateRequestedChange {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type Approval {
  id: ID!
  gcIDApprover: Profile!
  gcIDSubmitter: Profile!
  requestedChange: RequestedChange!
  createdOn: String!
  createdBy: Profile!
  updatedBy: Profile
  actionedOn: String
  deniedComment: String
  status: Status!
  changeType: ChangeType!
}

type ApprovalConnection {
  pageInfo: PageInfo!
  edges: [ApprovalEdge]!
  aggregate: AggregateApproval!
}

input ApprovalCreateInput {
  id: ID
  gcIDApprover: ProfileCreateOneWithoutOutstandingApprovalsInput!
  gcIDSubmitter: ProfileCreateOneWithoutSubmittedApprovalsInput!
  requestedChange: RequestedChangeCreateOneWithoutApprovalInput!
  createdOn: String!
  createdBy: ProfileCreateOneWithoutCreatedApprovalsInput!
  updatedBy: ProfileCreateOneWithoutUpdatedApprovalsInput
  actionedOn: String
  deniedComment: String
  status: Status!
  changeType: ChangeType!
}

input ApprovalCreateManyWithoutCreatedByInput {
  create: [ApprovalCreateWithoutCreatedByInput!]
  connect: [ApprovalWhereUniqueInput!]
}

input ApprovalCreateManyWithoutGcIDApproverInput {
  create: [ApprovalCreateWithoutGcIDApproverInput!]
  connect: [ApprovalWhereUniqueInput!]
}

input ApprovalCreateManyWithoutGcIDSubmitterInput {
  create: [ApprovalCreateWithoutGcIDSubmitterInput!]
  connect: [ApprovalWhereUniqueInput!]
}

input ApprovalCreateManyWithoutUpdatedByInput {
  create: [ApprovalCreateWithoutUpdatedByInput!]
  connect: [ApprovalWhereUniqueInput!]
}

input ApprovalCreateOneWithoutRequestedChangeInput {
  create: ApprovalCreateWithoutRequestedChangeInput
  connect: ApprovalWhereUniqueInput
}

input ApprovalCreateWithoutCreatedByInput {
  id: ID
  gcIDApprover: ProfileCreateOneWithoutOutstandingApprovalsInput!
  gcIDSubmitter: ProfileCreateOneWithoutSubmittedApprovalsInput!
  requestedChange: RequestedChangeCreateOneWithoutApprovalInput!
  createdOn: String!
  updatedBy: ProfileCreateOneWithoutUpdatedApprovalsInput
  actionedOn: String
  deniedComment: String
  status: Status!
  changeType: ChangeType!
}

input ApprovalCreateWithoutGcIDApproverInput {
  id: ID
  gcIDSubmitter: ProfileCreateOneWithoutSubmittedApprovalsInput!
  requestedChange: RequestedChangeCreateOneWithoutApprovalInput!
  createdOn: String!
  createdBy: ProfileCreateOneWithoutCreatedApprovalsInput!
  updatedBy: ProfileCreateOneWithoutUpdatedApprovalsInput
  actionedOn: String
  deniedComment: String
  status: Status!
  changeType: ChangeType!
}

input ApprovalCreateWithoutGcIDSubmitterInput {
  id: ID
  gcIDApprover: ProfileCreateOneWithoutOutstandingApprovalsInput!
  requestedChange: RequestedChangeCreateOneWithoutApprovalInput!
  createdOn: String!
  createdBy: ProfileCreateOneWithoutCreatedApprovalsInput!
  updatedBy: ProfileCreateOneWithoutUpdatedApprovalsInput
  actionedOn: String
  deniedComment: String
  status: Status!
  changeType: ChangeType!
}

input ApprovalCreateWithoutRequestedChangeInput {
  id: ID
  gcIDApprover: ProfileCreateOneWithoutOutstandingApprovalsInput!
  gcIDSubmitter: ProfileCreateOneWithoutSubmittedApprovalsInput!
  createdOn: String!
  createdBy: ProfileCreateOneWithoutCreatedApprovalsInput!
  updatedBy: ProfileCreateOneWithoutUpdatedApprovalsInput
  actionedOn: String
  deniedComment: String
  status: Status!
  changeType: ChangeType!
}

input ApprovalCreateWithoutUpdatedByInput {
  id: ID
  gcIDApprover: ProfileCreateOneWithoutOutstandingApprovalsInput!
  gcIDSubmitter: ProfileCreateOneWithoutSubmittedApprovalsInput!
  requestedChange: RequestedChangeCreateOneWithoutApprovalInput!
  createdOn: String!
  createdBy: ProfileCreateOneWithoutCreatedApprovalsInput!
  actionedOn: String
  deniedComment: String
  status: Status!
  changeType: ChangeType!
}

type ApprovalEdge {
  node: Approval!
  cursor: String!
}

enum ApprovalOrderByInput {
  id_ASC
  id_DESC
  createdOn_ASC
  createdOn_DESC
  actionedOn_ASC
  actionedOn_DESC
  deniedComment_ASC
  deniedComment_DESC
  status_ASC
  status_DESC
  changeType_ASC
  changeType_DESC
}

type ApprovalPreviousValues {
  id: ID!
  createdOn: String!
  actionedOn: String
  deniedComment: String
  status: Status!
  changeType: ChangeType!
}

input ApprovalScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdOn: String
  createdOn_not: String
  createdOn_in: [String!]
  createdOn_not_in: [String!]
  createdOn_lt: String
  createdOn_lte: String
  createdOn_gt: String
  createdOn_gte: String
  createdOn_contains: String
  createdOn_not_contains: String
  createdOn_starts_with: String
  createdOn_not_starts_with: String
  createdOn_ends_with: String
  createdOn_not_ends_with: String
  actionedOn: String
  actionedOn_not: String
  actionedOn_in: [String!]
  actionedOn_not_in: [String!]
  actionedOn_lt: String
  actionedOn_lte: String
  actionedOn_gt: String
  actionedOn_gte: String
  actionedOn_contains: String
  actionedOn_not_contains: String
  actionedOn_starts_with: String
  actionedOn_not_starts_with: String
  actionedOn_ends_with: String
  actionedOn_not_ends_with: String
  deniedComment: String
  deniedComment_not: String
  deniedComment_in: [String!]
  deniedComment_not_in: [String!]
  deniedComment_lt: String
  deniedComment_lte: String
  deniedComment_gt: String
  deniedComment_gte: String
  deniedComment_contains: String
  deniedComment_not_contains: String
  deniedComment_starts_with: String
  deniedComment_not_starts_with: String
  deniedComment_ends_with: String
  deniedComment_not_ends_with: String
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  changeType: ChangeType
  changeType_not: ChangeType
  changeType_in: [ChangeType!]
  changeType_not_in: [ChangeType!]
  AND: [ApprovalScalarWhereInput!]
  OR: [ApprovalScalarWhereInput!]
  NOT: [ApprovalScalarWhereInput!]
}

type ApprovalSubscriptionPayload {
  mutation: MutationType!
  node: Approval
  updatedFields: [String!]
  previousValues: ApprovalPreviousValues
}

input ApprovalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ApprovalWhereInput
  AND: [ApprovalSubscriptionWhereInput!]
  OR: [ApprovalSubscriptionWhereInput!]
  NOT: [ApprovalSubscriptionWhereInput!]
}

input ApprovalUpdateInput {
  gcIDApprover: ProfileUpdateOneRequiredWithoutOutstandingApprovalsInput
  gcIDSubmitter: ProfileUpdateOneRequiredWithoutSubmittedApprovalsInput
  requestedChange: RequestedChangeUpdateOneRequiredWithoutApprovalInput
  createdOn: String
  createdBy: ProfileUpdateOneRequiredWithoutCreatedApprovalsInput
  updatedBy: ProfileUpdateOneWithoutUpdatedApprovalsInput
  actionedOn: String
  deniedComment: String
  status: Status
  changeType: ChangeType
}

input ApprovalUpdateManyDataInput {
  createdOn: String
  actionedOn: String
  deniedComment: String
  status: Status
  changeType: ChangeType
}

input ApprovalUpdateManyMutationInput {
  createdOn: String
  actionedOn: String
  deniedComment: String
  status: Status
  changeType: ChangeType
}

input ApprovalUpdateManyWithoutCreatedByInput {
  create: [ApprovalCreateWithoutCreatedByInput!]
  delete: [ApprovalWhereUniqueInput!]
  connect: [ApprovalWhereUniqueInput!]
  set: [ApprovalWhereUniqueInput!]
  disconnect: [ApprovalWhereUniqueInput!]
  update: [ApprovalUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ApprovalUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [ApprovalScalarWhereInput!]
  updateMany: [ApprovalUpdateManyWithWhereNestedInput!]
}

input ApprovalUpdateManyWithoutGcIDApproverInput {
  create: [ApprovalCreateWithoutGcIDApproverInput!]
  delete: [ApprovalWhereUniqueInput!]
  connect: [ApprovalWhereUniqueInput!]
  set: [ApprovalWhereUniqueInput!]
  disconnect: [ApprovalWhereUniqueInput!]
  update: [ApprovalUpdateWithWhereUniqueWithoutGcIDApproverInput!]
  upsert: [ApprovalUpsertWithWhereUniqueWithoutGcIDApproverInput!]
  deleteMany: [ApprovalScalarWhereInput!]
  updateMany: [ApprovalUpdateManyWithWhereNestedInput!]
}

input ApprovalUpdateManyWithoutGcIDSubmitterInput {
  create: [ApprovalCreateWithoutGcIDSubmitterInput!]
  delete: [ApprovalWhereUniqueInput!]
  connect: [ApprovalWhereUniqueInput!]
  set: [ApprovalWhereUniqueInput!]
  disconnect: [ApprovalWhereUniqueInput!]
  update: [ApprovalUpdateWithWhereUniqueWithoutGcIDSubmitterInput!]
  upsert: [ApprovalUpsertWithWhereUniqueWithoutGcIDSubmitterInput!]
  deleteMany: [ApprovalScalarWhereInput!]
  updateMany: [ApprovalUpdateManyWithWhereNestedInput!]
}

input ApprovalUpdateManyWithoutUpdatedByInput {
  create: [ApprovalCreateWithoutUpdatedByInput!]
  delete: [ApprovalWhereUniqueInput!]
  connect: [ApprovalWhereUniqueInput!]
  set: [ApprovalWhereUniqueInput!]
  disconnect: [ApprovalWhereUniqueInput!]
  update: [ApprovalUpdateWithWhereUniqueWithoutUpdatedByInput!]
  upsert: [ApprovalUpsertWithWhereUniqueWithoutUpdatedByInput!]
  deleteMany: [ApprovalScalarWhereInput!]
  updateMany: [ApprovalUpdateManyWithWhereNestedInput!]
}

input ApprovalUpdateManyWithWhereNestedInput {
  where: ApprovalScalarWhereInput!
  data: ApprovalUpdateManyDataInput!
}

input ApprovalUpdateOneRequiredWithoutRequestedChangeInput {
  create: ApprovalCreateWithoutRequestedChangeInput
  update: ApprovalUpdateWithoutRequestedChangeDataInput
  upsert: ApprovalUpsertWithoutRequestedChangeInput
  connect: ApprovalWhereUniqueInput
}

input ApprovalUpdateWithoutCreatedByDataInput {
  gcIDApprover: ProfileUpdateOneRequiredWithoutOutstandingApprovalsInput
  gcIDSubmitter: ProfileUpdateOneRequiredWithoutSubmittedApprovalsInput
  requestedChange: RequestedChangeUpdateOneRequiredWithoutApprovalInput
  createdOn: String
  updatedBy: ProfileUpdateOneWithoutUpdatedApprovalsInput
  actionedOn: String
  deniedComment: String
  status: Status
  changeType: ChangeType
}

input ApprovalUpdateWithoutGcIDApproverDataInput {
  gcIDSubmitter: ProfileUpdateOneRequiredWithoutSubmittedApprovalsInput
  requestedChange: RequestedChangeUpdateOneRequiredWithoutApprovalInput
  createdOn: String
  createdBy: ProfileUpdateOneRequiredWithoutCreatedApprovalsInput
  updatedBy: ProfileUpdateOneWithoutUpdatedApprovalsInput
  actionedOn: String
  deniedComment: String
  status: Status
  changeType: ChangeType
}

input ApprovalUpdateWithoutGcIDSubmitterDataInput {
  gcIDApprover: ProfileUpdateOneRequiredWithoutOutstandingApprovalsInput
  requestedChange: RequestedChangeUpdateOneRequiredWithoutApprovalInput
  createdOn: String
  createdBy: ProfileUpdateOneRequiredWithoutCreatedApprovalsInput
  updatedBy: ProfileUpdateOneWithoutUpdatedApprovalsInput
  actionedOn: String
  deniedComment: String
  status: Status
  changeType: ChangeType
}

input ApprovalUpdateWithoutRequestedChangeDataInput {
  gcIDApprover: ProfileUpdateOneRequiredWithoutOutstandingApprovalsInput
  gcIDSubmitter: ProfileUpdateOneRequiredWithoutSubmittedApprovalsInput
  createdOn: String
  createdBy: ProfileUpdateOneRequiredWithoutCreatedApprovalsInput
  updatedBy: ProfileUpdateOneWithoutUpdatedApprovalsInput
  actionedOn: String
  deniedComment: String
  status: Status
  changeType: ChangeType
}

input ApprovalUpdateWithoutUpdatedByDataInput {
  gcIDApprover: ProfileUpdateOneRequiredWithoutOutstandingApprovalsInput
  gcIDSubmitter: ProfileUpdateOneRequiredWithoutSubmittedApprovalsInput
  requestedChange: RequestedChangeUpdateOneRequiredWithoutApprovalInput
  createdOn: String
  createdBy: ProfileUpdateOneRequiredWithoutCreatedApprovalsInput
  actionedOn: String
  deniedComment: String
  status: Status
  changeType: ChangeType
}

input ApprovalUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ApprovalWhereUniqueInput!
  data: ApprovalUpdateWithoutCreatedByDataInput!
}

input ApprovalUpdateWithWhereUniqueWithoutGcIDApproverInput {
  where: ApprovalWhereUniqueInput!
  data: ApprovalUpdateWithoutGcIDApproverDataInput!
}

input ApprovalUpdateWithWhereUniqueWithoutGcIDSubmitterInput {
  where: ApprovalWhereUniqueInput!
  data: ApprovalUpdateWithoutGcIDSubmitterDataInput!
}

input ApprovalUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: ApprovalWhereUniqueInput!
  data: ApprovalUpdateWithoutUpdatedByDataInput!
}

input ApprovalUpsertWithoutRequestedChangeInput {
  update: ApprovalUpdateWithoutRequestedChangeDataInput!
  create: ApprovalCreateWithoutRequestedChangeInput!
}

input ApprovalUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ApprovalWhereUniqueInput!
  update: ApprovalUpdateWithoutCreatedByDataInput!
  create: ApprovalCreateWithoutCreatedByInput!
}

input ApprovalUpsertWithWhereUniqueWithoutGcIDApproverInput {
  where: ApprovalWhereUniqueInput!
  update: ApprovalUpdateWithoutGcIDApproverDataInput!
  create: ApprovalCreateWithoutGcIDApproverInput!
}

input ApprovalUpsertWithWhereUniqueWithoutGcIDSubmitterInput {
  where: ApprovalWhereUniqueInput!
  update: ApprovalUpdateWithoutGcIDSubmitterDataInput!
  create: ApprovalCreateWithoutGcIDSubmitterInput!
}

input ApprovalUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: ApprovalWhereUniqueInput!
  update: ApprovalUpdateWithoutUpdatedByDataInput!
  create: ApprovalCreateWithoutUpdatedByInput!
}

input ApprovalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  gcIDApprover: ProfileWhereInput
  gcIDSubmitter: ProfileWhereInput
  requestedChange: RequestedChangeWhereInput
  createdOn: String
  createdOn_not: String
  createdOn_in: [String!]
  createdOn_not_in: [String!]
  createdOn_lt: String
  createdOn_lte: String
  createdOn_gt: String
  createdOn_gte: String
  createdOn_contains: String
  createdOn_not_contains: String
  createdOn_starts_with: String
  createdOn_not_starts_with: String
  createdOn_ends_with: String
  createdOn_not_ends_with: String
  createdBy: ProfileWhereInput
  updatedBy: ProfileWhereInput
  actionedOn: String
  actionedOn_not: String
  actionedOn_in: [String!]
  actionedOn_not_in: [String!]
  actionedOn_lt: String
  actionedOn_lte: String
  actionedOn_gt: String
  actionedOn_gte: String
  actionedOn_contains: String
  actionedOn_not_contains: String
  actionedOn_starts_with: String
  actionedOn_not_starts_with: String
  actionedOn_ends_with: String
  actionedOn_not_ends_with: String
  deniedComment: String
  deniedComment_not: String
  deniedComment_in: [String!]
  deniedComment_not_in: [String!]
  deniedComment_lt: String
  deniedComment_lte: String
  deniedComment_gt: String
  deniedComment_gte: String
  deniedComment_contains: String
  deniedComment_not_contains: String
  deniedComment_starts_with: String
  deniedComment_not_starts_with: String
  deniedComment_ends_with: String
  deniedComment_not_ends_with: String
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  changeType: ChangeType
  changeType_not: ChangeType
  changeType_in: [ChangeType!]
  changeType_not_in: [ChangeType!]
  AND: [ApprovalWhereInput!]
  OR: [ApprovalWhereInput!]
  NOT: [ApprovalWhereInput!]
}

input ApprovalWhereUniqueInput {
  id: ID
}

type Avatar {
  id: ID!
  name: String!
  url: String!
  deleteCode: String!
  deleteUrl: String!
}

type AvatarConnection {
  pageInfo: PageInfo!
  edges: [AvatarEdge]!
  aggregate: AggregateAvatar!
}

input AvatarCreateInput {
  id: ID
  name: String!
  url: String!
  deleteCode: String!
  deleteUrl: String!
}

type AvatarEdge {
  node: Avatar!
  cursor: String!
}

enum AvatarOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  deleteCode_ASC
  deleteCode_DESC
  deleteUrl_ASC
  deleteUrl_DESC
}

type AvatarPreviousValues {
  id: ID!
  name: String!
  url: String!
  deleteCode: String!
  deleteUrl: String!
}

type AvatarSubscriptionPayload {
  mutation: MutationType!
  node: Avatar
  updatedFields: [String!]
  previousValues: AvatarPreviousValues
}

input AvatarSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AvatarWhereInput
  AND: [AvatarSubscriptionWhereInput!]
  OR: [AvatarSubscriptionWhereInput!]
  NOT: [AvatarSubscriptionWhereInput!]
}

input AvatarUpdateInput {
  name: String
  url: String
  deleteCode: String
  deleteUrl: String
}

input AvatarUpdateManyMutationInput {
  name: String
  url: String
  deleteCode: String
  deleteUrl: String
}

input AvatarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  deleteCode: String
  deleteCode_not: String
  deleteCode_in: [String!]
  deleteCode_not_in: [String!]
  deleteCode_lt: String
  deleteCode_lte: String
  deleteCode_gt: String
  deleteCode_gte: String
  deleteCode_contains: String
  deleteCode_not_contains: String
  deleteCode_starts_with: String
  deleteCode_not_starts_with: String
  deleteCode_ends_with: String
  deleteCode_not_ends_with: String
  deleteUrl: String
  deleteUrl_not: String
  deleteUrl_in: [String!]
  deleteUrl_not_in: [String!]
  deleteUrl_lt: String
  deleteUrl_lte: String
  deleteUrl_gt: String
  deleteUrl_gte: String
  deleteUrl_contains: String
  deleteUrl_not_contains: String
  deleteUrl_starts_with: String
  deleteUrl_not_starts_with: String
  deleteUrl_ends_with: String
  deleteUrl_not_ends_with: String
  AND: [AvatarWhereInput!]
  OR: [AvatarWhereInput!]
  NOT: [AvatarWhereInput!]
}

input AvatarWhereUniqueInput {
  id: ID
  url: String
}

type BatchPayload {
  count: Long!
}

enum ChangeType {
  Membership
  Informational
  Team
}

scalar Long

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  createApproval(data: ApprovalCreateInput!): Approval!
  updateApproval(data: ApprovalUpdateInput!, where: ApprovalWhereUniqueInput!): Approval
  updateManyApprovals(data: ApprovalUpdateManyMutationInput!, where: ApprovalWhereInput): BatchPayload!
  upsertApproval(where: ApprovalWhereUniqueInput!, create: ApprovalCreateInput!, update: ApprovalUpdateInput!): Approval!
  deleteApproval(where: ApprovalWhereUniqueInput!): Approval
  deleteManyApprovals(where: ApprovalWhereInput): BatchPayload!
  createAvatar(data: AvatarCreateInput!): Avatar!
  updateAvatar(data: AvatarUpdateInput!, where: AvatarWhereUniqueInput!): Avatar
  updateManyAvatars(data: AvatarUpdateManyMutationInput!, where: AvatarWhereInput): BatchPayload!
  upsertAvatar(where: AvatarWhereUniqueInput!, create: AvatarCreateInput!, update: AvatarUpdateInput!): Avatar!
  deleteAvatar(where: AvatarWhereUniqueInput!): Avatar
  deleteManyAvatars(where: AvatarWhereInput): BatchPayload!
  createOrganization(data: OrganizationCreateInput!): Organization!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateManyOrganizations(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  createProfile(data: ProfileCreateInput!): Profile!
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  createRequestedChange(data: RequestedChangeCreateInput!): RequestedChange!
  updateRequestedChange(data: RequestedChangeUpdateInput!, where: RequestedChangeWhereUniqueInput!): RequestedChange
  updateManyRequestedChanges(data: RequestedChangeUpdateManyMutationInput!, where: RequestedChangeWhereInput): BatchPayload!
  upsertRequestedChange(where: RequestedChangeWhereUniqueInput!, create: RequestedChangeCreateInput!, update: RequestedChangeUpdateInput!): RequestedChange!
  deleteRequestedChange(where: RequestedChangeWhereUniqueInput!): RequestedChange
  deleteManyRequestedChanges(where: RequestedChangeWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Organization {
  id: ID!
  nameEn: String!
  nameFr: String!
  acronymEn: String!
  acronymFr: String!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
}

type OrganizationConnection {
  pageInfo: PageInfo!
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  id: ID
  nameEn: String!
  nameFr: String!
  acronymEn: String!
  acronymFr: String!
  teams: TeamCreateManyWithoutOrganizationInput
}

input OrganizationCreateOneWithoutTeamsInput {
  create: OrganizationCreateWithoutTeamsInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateWithoutTeamsInput {
  id: ID
  nameEn: String!
  nameFr: String!
  acronymEn: String!
  acronymFr: String!
}

type OrganizationEdge {
  node: Organization!
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  nameEn_ASC
  nameEn_DESC
  nameFr_ASC
  nameFr_DESC
  acronymEn_ASC
  acronymEn_DESC
  acronymFr_ASC
  acronymFr_DESC
}

type OrganizationPreviousValues {
  id: ID!
  nameEn: String!
  nameFr: String!
  acronymEn: String!
  acronymFr: String!
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
  AND: [OrganizationSubscriptionWhereInput!]
  OR: [OrganizationSubscriptionWhereInput!]
  NOT: [OrganizationSubscriptionWhereInput!]
}

input OrganizationUpdateInput {
  nameEn: String
  nameFr: String
  acronymEn: String
  acronymFr: String
  teams: TeamUpdateManyWithoutOrganizationInput
}

input OrganizationUpdateManyMutationInput {
  nameEn: String
  nameFr: String
  acronymEn: String
  acronymFr: String
}

input OrganizationUpdateOneRequiredWithoutTeamsInput {
  create: OrganizationCreateWithoutTeamsInput
  update: OrganizationUpdateWithoutTeamsDataInput
  upsert: OrganizationUpsertWithoutTeamsInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationUpdateWithoutTeamsDataInput {
  nameEn: String
  nameFr: String
  acronymEn: String
  acronymFr: String
}

input OrganizationUpsertWithoutTeamsInput {
  update: OrganizationUpdateWithoutTeamsDataInput!
  create: OrganizationCreateWithoutTeamsInput!
}

input OrganizationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nameEn: String
  nameEn_not: String
  nameEn_in: [String!]
  nameEn_not_in: [String!]
  nameEn_lt: String
  nameEn_lte: String
  nameEn_gt: String
  nameEn_gte: String
  nameEn_contains: String
  nameEn_not_contains: String
  nameEn_starts_with: String
  nameEn_not_starts_with: String
  nameEn_ends_with: String
  nameEn_not_ends_with: String
  nameFr: String
  nameFr_not: String
  nameFr_in: [String!]
  nameFr_not_in: [String!]
  nameFr_lt: String
  nameFr_lte: String
  nameFr_gt: String
  nameFr_gte: String
  nameFr_contains: String
  nameFr_not_contains: String
  nameFr_starts_with: String
  nameFr_not_starts_with: String
  nameFr_ends_with: String
  nameFr_not_ends_with: String
  acronymEn: String
  acronymEn_not: String
  acronymEn_in: [String!]
  acronymEn_not_in: [String!]
  acronymEn_lt: String
  acronymEn_lte: String
  acronymEn_gt: String
  acronymEn_gte: String
  acronymEn_contains: String
  acronymEn_not_contains: String
  acronymEn_starts_with: String
  acronymEn_not_starts_with: String
  acronymEn_ends_with: String
  acronymEn_not_ends_with: String
  acronymFr: String
  acronymFr_not: String
  acronymFr_in: [String!]
  acronymFr_not_in: [String!]
  acronymFr_lt: String
  acronymFr_lte: String
  acronymFr_gt: String
  acronymFr_gte: String
  acronymFr_contains: String
  acronymFr_not_contains: String
  acronymFr_starts_with: String
  acronymFr_not_starts_with: String
  acronymFr_ends_with: String
  acronymFr_not_ends_with: String
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
}

input OrganizationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Profile {
  gcID: ID!
  name: String!
  email: String!
  avatar: String
  mobilePhone: String
  officePhone: String
  address: Address
  titleEn: String
  titleFr: String
  team: Team
  ownerOfTeams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  outstandingApprovals(where: ApprovalWhereInput, orderBy: ApprovalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Approval!]
  submittedApprovals(where: ApprovalWhereInput, orderBy: ApprovalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Approval!]
  createdApprovals(where: ApprovalWhereInput, orderBy: ApprovalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Approval!]
  updatedApprovals(where: ApprovalWhereInput, orderBy: ApprovalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Approval!]
}

type ProfileConnection {
  pageInfo: PageInfo!
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  gcID: ID
  name: String!
  email: String!
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressCreateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamCreateOneWithoutMembersInput
  ownerOfTeams: TeamCreateManyWithoutOwnerInput
  outstandingApprovals: ApprovalCreateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalCreateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalCreateManyWithoutCreatedByInput
  updatedApprovals: ApprovalCreateManyWithoutUpdatedByInput
}

input ProfileCreateManyWithoutTeamInput {
  create: [ProfileCreateWithoutTeamInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateOneWithoutAddressInput {
  create: ProfileCreateWithoutAddressInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutCreatedApprovalsInput {
  create: ProfileCreateWithoutCreatedApprovalsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutOutstandingApprovalsInput {
  create: ProfileCreateWithoutOutstandingApprovalsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutOwnerOfTeamsInput {
  create: ProfileCreateWithoutOwnerOfTeamsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutSubmittedApprovalsInput {
  create: ProfileCreateWithoutSubmittedApprovalsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOneWithoutUpdatedApprovalsInput {
  create: ProfileCreateWithoutUpdatedApprovalsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutAddressInput {
  gcID: ID
  name: String!
  email: String!
  avatar: String
  mobilePhone: String
  officePhone: String
  titleEn: String
  titleFr: String
  team: TeamCreateOneWithoutMembersInput
  ownerOfTeams: TeamCreateManyWithoutOwnerInput
  outstandingApprovals: ApprovalCreateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalCreateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalCreateManyWithoutCreatedByInput
  updatedApprovals: ApprovalCreateManyWithoutUpdatedByInput
}

input ProfileCreateWithoutCreatedApprovalsInput {
  gcID: ID
  name: String!
  email: String!
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressCreateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamCreateOneWithoutMembersInput
  ownerOfTeams: TeamCreateManyWithoutOwnerInput
  outstandingApprovals: ApprovalCreateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalCreateManyWithoutGcIDSubmitterInput
  updatedApprovals: ApprovalCreateManyWithoutUpdatedByInput
}

input ProfileCreateWithoutOutstandingApprovalsInput {
  gcID: ID
  name: String!
  email: String!
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressCreateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamCreateOneWithoutMembersInput
  ownerOfTeams: TeamCreateManyWithoutOwnerInput
  submittedApprovals: ApprovalCreateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalCreateManyWithoutCreatedByInput
  updatedApprovals: ApprovalCreateManyWithoutUpdatedByInput
}

input ProfileCreateWithoutOwnerOfTeamsInput {
  gcID: ID
  name: String!
  email: String!
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressCreateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamCreateOneWithoutMembersInput
  outstandingApprovals: ApprovalCreateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalCreateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalCreateManyWithoutCreatedByInput
  updatedApprovals: ApprovalCreateManyWithoutUpdatedByInput
}

input ProfileCreateWithoutSubmittedApprovalsInput {
  gcID: ID
  name: String!
  email: String!
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressCreateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamCreateOneWithoutMembersInput
  ownerOfTeams: TeamCreateManyWithoutOwnerInput
  outstandingApprovals: ApprovalCreateManyWithoutGcIDApproverInput
  createdApprovals: ApprovalCreateManyWithoutCreatedByInput
  updatedApprovals: ApprovalCreateManyWithoutUpdatedByInput
}

input ProfileCreateWithoutTeamInput {
  gcID: ID
  name: String!
  email: String!
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressCreateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  ownerOfTeams: TeamCreateManyWithoutOwnerInput
  outstandingApprovals: ApprovalCreateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalCreateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalCreateManyWithoutCreatedByInput
  updatedApprovals: ApprovalCreateManyWithoutUpdatedByInput
}

input ProfileCreateWithoutUpdatedApprovalsInput {
  gcID: ID
  name: String!
  email: String!
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressCreateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamCreateOneWithoutMembersInput
  ownerOfTeams: TeamCreateManyWithoutOwnerInput
  outstandingApprovals: ApprovalCreateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalCreateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalCreateManyWithoutCreatedByInput
}

type ProfileEdge {
  node: Profile!
  cursor: String!
}

enum ProfileOrderByInput {
  gcID_ASC
  gcID_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  avatar_ASC
  avatar_DESC
  mobilePhone_ASC
  mobilePhone_DESC
  officePhone_ASC
  officePhone_DESC
  titleEn_ASC
  titleEn_DESC
  titleFr_ASC
  titleFr_DESC
}

type ProfilePreviousValues {
  gcID: ID!
  name: String!
  email: String!
  avatar: String
  mobilePhone: String
  officePhone: String
  titleEn: String
  titleFr: String
}

input ProfileScalarWhereInput {
  gcID: ID
  gcID_not: ID
  gcID_in: [ID!]
  gcID_not_in: [ID!]
  gcID_lt: ID
  gcID_lte: ID
  gcID_gt: ID
  gcID_gte: ID
  gcID_contains: ID
  gcID_not_contains: ID
  gcID_starts_with: ID
  gcID_not_starts_with: ID
  gcID_ends_with: ID
  gcID_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  mobilePhone: String
  mobilePhone_not: String
  mobilePhone_in: [String!]
  mobilePhone_not_in: [String!]
  mobilePhone_lt: String
  mobilePhone_lte: String
  mobilePhone_gt: String
  mobilePhone_gte: String
  mobilePhone_contains: String
  mobilePhone_not_contains: String
  mobilePhone_starts_with: String
  mobilePhone_not_starts_with: String
  mobilePhone_ends_with: String
  mobilePhone_not_ends_with: String
  officePhone: String
  officePhone_not: String
  officePhone_in: [String!]
  officePhone_not_in: [String!]
  officePhone_lt: String
  officePhone_lte: String
  officePhone_gt: String
  officePhone_gte: String
  officePhone_contains: String
  officePhone_not_contains: String
  officePhone_starts_with: String
  officePhone_not_starts_with: String
  officePhone_ends_with: String
  officePhone_not_ends_with: String
  titleEn: String
  titleEn_not: String
  titleEn_in: [String!]
  titleEn_not_in: [String!]
  titleEn_lt: String
  titleEn_lte: String
  titleEn_gt: String
  titleEn_gte: String
  titleEn_contains: String
  titleEn_not_contains: String
  titleEn_starts_with: String
  titleEn_not_starts_with: String
  titleEn_ends_with: String
  titleEn_not_ends_with: String
  titleFr: String
  titleFr_not: String
  titleFr_in: [String!]
  titleFr_not_in: [String!]
  titleFr_lt: String
  titleFr_lte: String
  titleFr_gt: String
  titleFr_gte: String
  titleFr_contains: String
  titleFr_not_contains: String
  titleFr_starts_with: String
  titleFr_not_starts_with: String
  titleFr_ends_with: String
  titleFr_not_ends_with: String
  AND: [ProfileScalarWhereInput!]
  OR: [ProfileScalarWhereInput!]
  NOT: [ProfileScalarWhereInput!]
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
  AND: [ProfileSubscriptionWhereInput!]
  OR: [ProfileSubscriptionWhereInput!]
  NOT: [ProfileSubscriptionWhereInput!]
}

input ProfileUpdateInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressUpdateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamUpdateOneWithoutMembersInput
  ownerOfTeams: TeamUpdateManyWithoutOwnerInput
  outstandingApprovals: ApprovalUpdateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalUpdateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalUpdateManyWithoutCreatedByInput
  updatedApprovals: ApprovalUpdateManyWithoutUpdatedByInput
}

input ProfileUpdateManyDataInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  titleEn: String
  titleFr: String
}

input ProfileUpdateManyMutationInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  titleEn: String
  titleFr: String
}

input ProfileUpdateManyWithoutTeamInput {
  create: [ProfileCreateWithoutTeamInput!]
  delete: [ProfileWhereUniqueInput!]
  connect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [ProfileScalarWhereInput!]
  updateMany: [ProfileUpdateManyWithWhereNestedInput!]
}

input ProfileUpdateManyWithWhereNestedInput {
  where: ProfileScalarWhereInput!
  data: ProfileUpdateManyDataInput!
}

input ProfileUpdateOneRequiredWithoutCreatedApprovalsInput {
  create: ProfileCreateWithoutCreatedApprovalsInput
  update: ProfileUpdateWithoutCreatedApprovalsDataInput
  upsert: ProfileUpsertWithoutCreatedApprovalsInput
  connect: ProfileWhereUniqueInput
}

input ProfileUpdateOneRequiredWithoutOutstandingApprovalsInput {
  create: ProfileCreateWithoutOutstandingApprovalsInput
  update: ProfileUpdateWithoutOutstandingApprovalsDataInput
  upsert: ProfileUpsertWithoutOutstandingApprovalsInput
  connect: ProfileWhereUniqueInput
}

input ProfileUpdateOneRequiredWithoutSubmittedApprovalsInput {
  create: ProfileCreateWithoutSubmittedApprovalsInput
  update: ProfileUpdateWithoutSubmittedApprovalsDataInput
  upsert: ProfileUpsertWithoutSubmittedApprovalsInput
  connect: ProfileWhereUniqueInput
}

input ProfileUpdateOneWithoutAddressInput {
  create: ProfileCreateWithoutAddressInput
  update: ProfileUpdateWithoutAddressDataInput
  upsert: ProfileUpsertWithoutAddressInput
  delete: Boolean
  disconnect: Boolean
  connect: ProfileWhereUniqueInput
}

input ProfileUpdateOneWithoutOwnerOfTeamsInput {
  create: ProfileCreateWithoutOwnerOfTeamsInput
  update: ProfileUpdateWithoutOwnerOfTeamsDataInput
  upsert: ProfileUpsertWithoutOwnerOfTeamsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProfileWhereUniqueInput
}

input ProfileUpdateOneWithoutUpdatedApprovalsInput {
  create: ProfileCreateWithoutUpdatedApprovalsInput
  update: ProfileUpdateWithoutUpdatedApprovalsDataInput
  upsert: ProfileUpsertWithoutUpdatedApprovalsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProfileWhereUniqueInput
}

input ProfileUpdateWithoutAddressDataInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  titleEn: String
  titleFr: String
  team: TeamUpdateOneWithoutMembersInput
  ownerOfTeams: TeamUpdateManyWithoutOwnerInput
  outstandingApprovals: ApprovalUpdateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalUpdateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalUpdateManyWithoutCreatedByInput
  updatedApprovals: ApprovalUpdateManyWithoutUpdatedByInput
}

input ProfileUpdateWithoutCreatedApprovalsDataInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressUpdateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamUpdateOneWithoutMembersInput
  ownerOfTeams: TeamUpdateManyWithoutOwnerInput
  outstandingApprovals: ApprovalUpdateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalUpdateManyWithoutGcIDSubmitterInput
  updatedApprovals: ApprovalUpdateManyWithoutUpdatedByInput
}

input ProfileUpdateWithoutOutstandingApprovalsDataInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressUpdateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamUpdateOneWithoutMembersInput
  ownerOfTeams: TeamUpdateManyWithoutOwnerInput
  submittedApprovals: ApprovalUpdateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalUpdateManyWithoutCreatedByInput
  updatedApprovals: ApprovalUpdateManyWithoutUpdatedByInput
}

input ProfileUpdateWithoutOwnerOfTeamsDataInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressUpdateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamUpdateOneWithoutMembersInput
  outstandingApprovals: ApprovalUpdateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalUpdateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalUpdateManyWithoutCreatedByInput
  updatedApprovals: ApprovalUpdateManyWithoutUpdatedByInput
}

input ProfileUpdateWithoutSubmittedApprovalsDataInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressUpdateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamUpdateOneWithoutMembersInput
  ownerOfTeams: TeamUpdateManyWithoutOwnerInput
  outstandingApprovals: ApprovalUpdateManyWithoutGcIDApproverInput
  createdApprovals: ApprovalUpdateManyWithoutCreatedByInput
  updatedApprovals: ApprovalUpdateManyWithoutUpdatedByInput
}

input ProfileUpdateWithoutTeamDataInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressUpdateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  ownerOfTeams: TeamUpdateManyWithoutOwnerInput
  outstandingApprovals: ApprovalUpdateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalUpdateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalUpdateManyWithoutCreatedByInput
  updatedApprovals: ApprovalUpdateManyWithoutUpdatedByInput
}

input ProfileUpdateWithoutUpdatedApprovalsDataInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressUpdateOneWithoutResidentInput
  titleEn: String
  titleFr: String
  team: TeamUpdateOneWithoutMembersInput
  ownerOfTeams: TeamUpdateManyWithoutOwnerInput
  outstandingApprovals: ApprovalUpdateManyWithoutGcIDApproverInput
  submittedApprovals: ApprovalUpdateManyWithoutGcIDSubmitterInput
  createdApprovals: ApprovalUpdateManyWithoutCreatedByInput
}

input ProfileUpdateWithWhereUniqueWithoutTeamInput {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutTeamDataInput!
}

input ProfileUpsertWithoutAddressInput {
  update: ProfileUpdateWithoutAddressDataInput!
  create: ProfileCreateWithoutAddressInput!
}

input ProfileUpsertWithoutCreatedApprovalsInput {
  update: ProfileUpdateWithoutCreatedApprovalsDataInput!
  create: ProfileCreateWithoutCreatedApprovalsInput!
}

input ProfileUpsertWithoutOutstandingApprovalsInput {
  update: ProfileUpdateWithoutOutstandingApprovalsDataInput!
  create: ProfileCreateWithoutOutstandingApprovalsInput!
}

input ProfileUpsertWithoutOwnerOfTeamsInput {
  update: ProfileUpdateWithoutOwnerOfTeamsDataInput!
  create: ProfileCreateWithoutOwnerOfTeamsInput!
}

input ProfileUpsertWithoutSubmittedApprovalsInput {
  update: ProfileUpdateWithoutSubmittedApprovalsDataInput!
  create: ProfileCreateWithoutSubmittedApprovalsInput!
}

input ProfileUpsertWithoutUpdatedApprovalsInput {
  update: ProfileUpdateWithoutUpdatedApprovalsDataInput!
  create: ProfileCreateWithoutUpdatedApprovalsInput!
}

input ProfileUpsertWithWhereUniqueWithoutTeamInput {
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutTeamDataInput!
  create: ProfileCreateWithoutTeamInput!
}

input ProfileWhereInput {
  gcID: ID
  gcID_not: ID
  gcID_in: [ID!]
  gcID_not_in: [ID!]
  gcID_lt: ID
  gcID_lte: ID
  gcID_gt: ID
  gcID_gte: ID
  gcID_contains: ID
  gcID_not_contains: ID
  gcID_starts_with: ID
  gcID_not_starts_with: ID
  gcID_ends_with: ID
  gcID_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  mobilePhone: String
  mobilePhone_not: String
  mobilePhone_in: [String!]
  mobilePhone_not_in: [String!]
  mobilePhone_lt: String
  mobilePhone_lte: String
  mobilePhone_gt: String
  mobilePhone_gte: String
  mobilePhone_contains: String
  mobilePhone_not_contains: String
  mobilePhone_starts_with: String
  mobilePhone_not_starts_with: String
  mobilePhone_ends_with: String
  mobilePhone_not_ends_with: String
  officePhone: String
  officePhone_not: String
  officePhone_in: [String!]
  officePhone_not_in: [String!]
  officePhone_lt: String
  officePhone_lte: String
  officePhone_gt: String
  officePhone_gte: String
  officePhone_contains: String
  officePhone_not_contains: String
  officePhone_starts_with: String
  officePhone_not_starts_with: String
  officePhone_ends_with: String
  officePhone_not_ends_with: String
  address: AddressWhereInput
  titleEn: String
  titleEn_not: String
  titleEn_in: [String!]
  titleEn_not_in: [String!]
  titleEn_lt: String
  titleEn_lte: String
  titleEn_gt: String
  titleEn_gte: String
  titleEn_contains: String
  titleEn_not_contains: String
  titleEn_starts_with: String
  titleEn_not_starts_with: String
  titleEn_ends_with: String
  titleEn_not_ends_with: String
  titleFr: String
  titleFr_not: String
  titleFr_in: [String!]
  titleFr_not_in: [String!]
  titleFr_lt: String
  titleFr_lte: String
  titleFr_gt: String
  titleFr_gte: String
  titleFr_contains: String
  titleFr_not_contains: String
  titleFr_starts_with: String
  titleFr_not_starts_with: String
  titleFr_ends_with: String
  titleFr_not_ends_with: String
  team: TeamWhereInput
  ownerOfTeams_every: TeamWhereInput
  ownerOfTeams_some: TeamWhereInput
  ownerOfTeams_none: TeamWhereInput
  outstandingApprovals_every: ApprovalWhereInput
  outstandingApprovals_some: ApprovalWhereInput
  outstandingApprovals_none: ApprovalWhereInput
  submittedApprovals_every: ApprovalWhereInput
  submittedApprovals_some: ApprovalWhereInput
  submittedApprovals_none: ApprovalWhereInput
  createdApprovals_every: ApprovalWhereInput
  createdApprovals_some: ApprovalWhereInput
  createdApprovals_none: ApprovalWhereInput
  updatedApprovals_every: ApprovalWhereInput
  updatedApprovals_some: ApprovalWhereInput
  updatedApprovals_none: ApprovalWhereInput
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
}

input ProfileWhereUniqueInput {
  gcID: ID
  email: String
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  approval(where: ApprovalWhereUniqueInput!): Approval
  approvals(where: ApprovalWhereInput, orderBy: ApprovalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Approval]!
  approvalsConnection(where: ApprovalWhereInput, orderBy: ApprovalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApprovalConnection!
  avatar(where: AvatarWhereUniqueInput!): Avatar
  avatars(where: AvatarWhereInput, orderBy: AvatarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Avatar]!
  avatarsConnection(where: AvatarWhereInput, orderBy: AvatarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AvatarConnection!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  requestedChange(where: RequestedChangeWhereUniqueInput!): RequestedChange
  requestedChanges(where: RequestedChangeWhereInput, orderBy: RequestedChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RequestedChange]!
  requestedChangesConnection(where: RequestedChangeWhereInput, orderBy: RequestedChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RequestedChangeConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  node(id: ID!): Node
}

type RequestedChange {
  id: ID!
  approval: Approval!
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: Address
  titleEn: String
  titleFr: String
  team: Team
  ownershipOfTeam: Team
}

type RequestedChangeConnection {
  pageInfo: PageInfo!
  edges: [RequestedChangeEdge]!
  aggregate: AggregateRequestedChange!
}

input RequestedChangeCreateInput {
  id: ID
  approval: ApprovalCreateOneWithoutRequestedChangeInput!
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressCreateOneInput
  titleEn: String
  titleFr: String
  team: TeamCreateOneWithoutSupervisorApprovalInput
  ownershipOfTeam: TeamCreateOneWithoutTransferApprovalInput
}

input RequestedChangeCreateManyWithoutTeamInput {
  create: [RequestedChangeCreateWithoutTeamInput!]
  connect: [RequestedChangeWhereUniqueInput!]
}

input RequestedChangeCreateOneWithoutApprovalInput {
  create: RequestedChangeCreateWithoutApprovalInput
  connect: RequestedChangeWhereUniqueInput
}

input RequestedChangeCreateOneWithoutOwnershipOfTeamInput {
  create: RequestedChangeCreateWithoutOwnershipOfTeamInput
  connect: RequestedChangeWhereUniqueInput
}

input RequestedChangeCreateWithoutApprovalInput {
  id: ID
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressCreateOneInput
  titleEn: String
  titleFr: String
  team: TeamCreateOneWithoutSupervisorApprovalInput
  ownershipOfTeam: TeamCreateOneWithoutTransferApprovalInput
}

input RequestedChangeCreateWithoutOwnershipOfTeamInput {
  id: ID
  approval: ApprovalCreateOneWithoutRequestedChangeInput!
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressCreateOneInput
  titleEn: String
  titleFr: String
  team: TeamCreateOneWithoutSupervisorApprovalInput
}

input RequestedChangeCreateWithoutTeamInput {
  id: ID
  approval: ApprovalCreateOneWithoutRequestedChangeInput!
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressCreateOneInput
  titleEn: String
  titleFr: String
  ownershipOfTeam: TeamCreateOneWithoutTransferApprovalInput
}

type RequestedChangeEdge {
  node: RequestedChange!
  cursor: String!
}

enum RequestedChangeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  avatar_ASC
  avatar_DESC
  mobilePhone_ASC
  mobilePhone_DESC
  officePhone_ASC
  officePhone_DESC
  titleEn_ASC
  titleEn_DESC
  titleFr_ASC
  titleFr_DESC
}

type RequestedChangePreviousValues {
  id: ID!
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  titleEn: String
  titleFr: String
}

input RequestedChangeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  mobilePhone: String
  mobilePhone_not: String
  mobilePhone_in: [String!]
  mobilePhone_not_in: [String!]
  mobilePhone_lt: String
  mobilePhone_lte: String
  mobilePhone_gt: String
  mobilePhone_gte: String
  mobilePhone_contains: String
  mobilePhone_not_contains: String
  mobilePhone_starts_with: String
  mobilePhone_not_starts_with: String
  mobilePhone_ends_with: String
  mobilePhone_not_ends_with: String
  officePhone: String
  officePhone_not: String
  officePhone_in: [String!]
  officePhone_not_in: [String!]
  officePhone_lt: String
  officePhone_lte: String
  officePhone_gt: String
  officePhone_gte: String
  officePhone_contains: String
  officePhone_not_contains: String
  officePhone_starts_with: String
  officePhone_not_starts_with: String
  officePhone_ends_with: String
  officePhone_not_ends_with: String
  titleEn: String
  titleEn_not: String
  titleEn_in: [String!]
  titleEn_not_in: [String!]
  titleEn_lt: String
  titleEn_lte: String
  titleEn_gt: String
  titleEn_gte: String
  titleEn_contains: String
  titleEn_not_contains: String
  titleEn_starts_with: String
  titleEn_not_starts_with: String
  titleEn_ends_with: String
  titleEn_not_ends_with: String
  titleFr: String
  titleFr_not: String
  titleFr_in: [String!]
  titleFr_not_in: [String!]
  titleFr_lt: String
  titleFr_lte: String
  titleFr_gt: String
  titleFr_gte: String
  titleFr_contains: String
  titleFr_not_contains: String
  titleFr_starts_with: String
  titleFr_not_starts_with: String
  titleFr_ends_with: String
  titleFr_not_ends_with: String
  AND: [RequestedChangeScalarWhereInput!]
  OR: [RequestedChangeScalarWhereInput!]
  NOT: [RequestedChangeScalarWhereInput!]
}

type RequestedChangeSubscriptionPayload {
  mutation: MutationType!
  node: RequestedChange
  updatedFields: [String!]
  previousValues: RequestedChangePreviousValues
}

input RequestedChangeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RequestedChangeWhereInput
  AND: [RequestedChangeSubscriptionWhereInput!]
  OR: [RequestedChangeSubscriptionWhereInput!]
  NOT: [RequestedChangeSubscriptionWhereInput!]
}

input RequestedChangeUpdateInput {
  approval: ApprovalUpdateOneRequiredWithoutRequestedChangeInput
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressUpdateOneInput
  titleEn: String
  titleFr: String
  team: TeamUpdateOneWithoutSupervisorApprovalInput
  ownershipOfTeam: TeamUpdateOneWithoutTransferApprovalInput
}

input RequestedChangeUpdateManyDataInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  titleEn: String
  titleFr: String
}

input RequestedChangeUpdateManyMutationInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  titleEn: String
  titleFr: String
}

input RequestedChangeUpdateManyWithoutTeamInput {
  create: [RequestedChangeCreateWithoutTeamInput!]
  delete: [RequestedChangeWhereUniqueInput!]
  connect: [RequestedChangeWhereUniqueInput!]
  set: [RequestedChangeWhereUniqueInput!]
  disconnect: [RequestedChangeWhereUniqueInput!]
  update: [RequestedChangeUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [RequestedChangeUpsertWithWhereUniqueWithoutTeamInput!]
  deleteMany: [RequestedChangeScalarWhereInput!]
  updateMany: [RequestedChangeUpdateManyWithWhereNestedInput!]
}

input RequestedChangeUpdateManyWithWhereNestedInput {
  where: RequestedChangeScalarWhereInput!
  data: RequestedChangeUpdateManyDataInput!
}

input RequestedChangeUpdateOneRequiredWithoutApprovalInput {
  create: RequestedChangeCreateWithoutApprovalInput
  update: RequestedChangeUpdateWithoutApprovalDataInput
  upsert: RequestedChangeUpsertWithoutApprovalInput
  connect: RequestedChangeWhereUniqueInput
}

input RequestedChangeUpdateOneWithoutOwnershipOfTeamInput {
  create: RequestedChangeCreateWithoutOwnershipOfTeamInput
  update: RequestedChangeUpdateWithoutOwnershipOfTeamDataInput
  upsert: RequestedChangeUpsertWithoutOwnershipOfTeamInput
  delete: Boolean
  disconnect: Boolean
  connect: RequestedChangeWhereUniqueInput
}

input RequestedChangeUpdateWithoutApprovalDataInput {
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressUpdateOneInput
  titleEn: String
  titleFr: String
  team: TeamUpdateOneWithoutSupervisorApprovalInput
  ownershipOfTeam: TeamUpdateOneWithoutTransferApprovalInput
}

input RequestedChangeUpdateWithoutOwnershipOfTeamDataInput {
  approval: ApprovalUpdateOneRequiredWithoutRequestedChangeInput
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressUpdateOneInput
  titleEn: String
  titleFr: String
  team: TeamUpdateOneWithoutSupervisorApprovalInput
}

input RequestedChangeUpdateWithoutTeamDataInput {
  approval: ApprovalUpdateOneRequiredWithoutRequestedChangeInput
  name: String
  email: String
  avatar: String
  mobilePhone: String
  officePhone: String
  address: AddressUpdateOneInput
  titleEn: String
  titleFr: String
  ownershipOfTeam: TeamUpdateOneWithoutTransferApprovalInput
}

input RequestedChangeUpdateWithWhereUniqueWithoutTeamInput {
  where: RequestedChangeWhereUniqueInput!
  data: RequestedChangeUpdateWithoutTeamDataInput!
}

input RequestedChangeUpsertWithoutApprovalInput {
  update: RequestedChangeUpdateWithoutApprovalDataInput!
  create: RequestedChangeCreateWithoutApprovalInput!
}

input RequestedChangeUpsertWithoutOwnershipOfTeamInput {
  update: RequestedChangeUpdateWithoutOwnershipOfTeamDataInput!
  create: RequestedChangeCreateWithoutOwnershipOfTeamInput!
}

input RequestedChangeUpsertWithWhereUniqueWithoutTeamInput {
  where: RequestedChangeWhereUniqueInput!
  update: RequestedChangeUpdateWithoutTeamDataInput!
  create: RequestedChangeCreateWithoutTeamInput!
}

input RequestedChangeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  approval: ApprovalWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  mobilePhone: String
  mobilePhone_not: String
  mobilePhone_in: [String!]
  mobilePhone_not_in: [String!]
  mobilePhone_lt: String
  mobilePhone_lte: String
  mobilePhone_gt: String
  mobilePhone_gte: String
  mobilePhone_contains: String
  mobilePhone_not_contains: String
  mobilePhone_starts_with: String
  mobilePhone_not_starts_with: String
  mobilePhone_ends_with: String
  mobilePhone_not_ends_with: String
  officePhone: String
  officePhone_not: String
  officePhone_in: [String!]
  officePhone_not_in: [String!]
  officePhone_lt: String
  officePhone_lte: String
  officePhone_gt: String
  officePhone_gte: String
  officePhone_contains: String
  officePhone_not_contains: String
  officePhone_starts_with: String
  officePhone_not_starts_with: String
  officePhone_ends_with: String
  officePhone_not_ends_with: String
  address: AddressWhereInput
  titleEn: String
  titleEn_not: String
  titleEn_in: [String!]
  titleEn_not_in: [String!]
  titleEn_lt: String
  titleEn_lte: String
  titleEn_gt: String
  titleEn_gte: String
  titleEn_contains: String
  titleEn_not_contains: String
  titleEn_starts_with: String
  titleEn_not_starts_with: String
  titleEn_ends_with: String
  titleEn_not_ends_with: String
  titleFr: String
  titleFr_not: String
  titleFr_in: [String!]
  titleFr_not_in: [String!]
  titleFr_lt: String
  titleFr_lte: String
  titleFr_gt: String
  titleFr_gte: String
  titleFr_contains: String
  titleFr_not_contains: String
  titleFr_starts_with: String
  titleFr_not_starts_with: String
  titleFr_ends_with: String
  titleFr_not_ends_with: String
  team: TeamWhereInput
  ownershipOfTeam: TeamWhereInput
  AND: [RequestedChangeWhereInput!]
  OR: [RequestedChangeWhereInput!]
  NOT: [RequestedChangeWhereInput!]
}

input RequestedChangeWhereUniqueInput {
  id: ID
}

enum Status {
  Pending
  Approved
  Denied
  Revoked
}

type Subscription {
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  approval(where: ApprovalSubscriptionWhereInput): ApprovalSubscriptionPayload
  avatar(where: AvatarSubscriptionWhereInput): AvatarSubscriptionPayload
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  requestedChange(where: RequestedChangeSubscriptionWhereInput): RequestedChangeSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
}

type Team {
  id: ID!
  nameEn: String!
  nameFr: String!
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  organization: Organization!
  owner: Profile
  members(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile!]
  transferApproval: RequestedChange
  supervisorApproval(where: RequestedChangeWhereInput, orderBy: RequestedChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RequestedChange!]
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  id: ID
  nameEn: String!
  nameFr: String!
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  organization: OrganizationCreateOneWithoutTeamsInput!
  owner: ProfileCreateOneWithoutOwnerOfTeamsInput
  members: ProfileCreateManyWithoutTeamInput
  transferApproval: RequestedChangeCreateOneWithoutOwnershipOfTeamInput
  supervisorApproval: RequestedChangeCreateManyWithoutTeamInput
}

input TeamCreateManyWithoutOrganizationInput {
  create: [TeamCreateWithoutOrganizationInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateManyWithoutOwnerInput {
  create: [TeamCreateWithoutOwnerInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateOneWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutSupervisorApprovalInput {
  create: TeamCreateWithoutSupervisorApprovalInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutTransferApprovalInput {
  create: TeamCreateWithoutTransferApprovalInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutMembersInput {
  id: ID
  nameEn: String!
  nameFr: String!
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  organization: OrganizationCreateOneWithoutTeamsInput!
  owner: ProfileCreateOneWithoutOwnerOfTeamsInput
  transferApproval: RequestedChangeCreateOneWithoutOwnershipOfTeamInput
  supervisorApproval: RequestedChangeCreateManyWithoutTeamInput
}

input TeamCreateWithoutOrganizationInput {
  id: ID
  nameEn: String!
  nameFr: String!
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  owner: ProfileCreateOneWithoutOwnerOfTeamsInput
  members: ProfileCreateManyWithoutTeamInput
  transferApproval: RequestedChangeCreateOneWithoutOwnershipOfTeamInput
  supervisorApproval: RequestedChangeCreateManyWithoutTeamInput
}

input TeamCreateWithoutOwnerInput {
  id: ID
  nameEn: String!
  nameFr: String!
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  organization: OrganizationCreateOneWithoutTeamsInput!
  members: ProfileCreateManyWithoutTeamInput
  transferApproval: RequestedChangeCreateOneWithoutOwnershipOfTeamInput
  supervisorApproval: RequestedChangeCreateManyWithoutTeamInput
}

input TeamCreateWithoutSupervisorApprovalInput {
  id: ID
  nameEn: String!
  nameFr: String!
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  organization: OrganizationCreateOneWithoutTeamsInput!
  owner: ProfileCreateOneWithoutOwnerOfTeamsInput
  members: ProfileCreateManyWithoutTeamInput
  transferApproval: RequestedChangeCreateOneWithoutOwnershipOfTeamInput
}

input TeamCreateWithoutTransferApprovalInput {
  id: ID
  nameEn: String!
  nameFr: String!
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  organization: OrganizationCreateOneWithoutTeamsInput!
  owner: ProfileCreateOneWithoutOwnerOfTeamsInput
  members: ProfileCreateManyWithoutTeamInput
  supervisorApproval: RequestedChangeCreateManyWithoutTeamInput
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  nameEn_ASC
  nameEn_DESC
  nameFr_ASC
  nameFr_DESC
  descriptionEn_ASC
  descriptionEn_DESC
  descriptionFr_ASC
  descriptionFr_DESC
  colour_ASC
  colour_DESC
  avatar_ASC
  avatar_DESC
}

type TeamPreviousValues {
  id: ID!
  nameEn: String!
  nameFr: String!
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
}

input TeamScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nameEn: String
  nameEn_not: String
  nameEn_in: [String!]
  nameEn_not_in: [String!]
  nameEn_lt: String
  nameEn_lte: String
  nameEn_gt: String
  nameEn_gte: String
  nameEn_contains: String
  nameEn_not_contains: String
  nameEn_starts_with: String
  nameEn_not_starts_with: String
  nameEn_ends_with: String
  nameEn_not_ends_with: String
  nameFr: String
  nameFr_not: String
  nameFr_in: [String!]
  nameFr_not_in: [String!]
  nameFr_lt: String
  nameFr_lte: String
  nameFr_gt: String
  nameFr_gte: String
  nameFr_contains: String
  nameFr_not_contains: String
  nameFr_starts_with: String
  nameFr_not_starts_with: String
  nameFr_ends_with: String
  nameFr_not_ends_with: String
  descriptionEn: String
  descriptionEn_not: String
  descriptionEn_in: [String!]
  descriptionEn_not_in: [String!]
  descriptionEn_lt: String
  descriptionEn_lte: String
  descriptionEn_gt: String
  descriptionEn_gte: String
  descriptionEn_contains: String
  descriptionEn_not_contains: String
  descriptionEn_starts_with: String
  descriptionEn_not_starts_with: String
  descriptionEn_ends_with: String
  descriptionEn_not_ends_with: String
  descriptionFr: String
  descriptionFr_not: String
  descriptionFr_in: [String!]
  descriptionFr_not_in: [String!]
  descriptionFr_lt: String
  descriptionFr_lte: String
  descriptionFr_gt: String
  descriptionFr_gte: String
  descriptionFr_contains: String
  descriptionFr_not_contains: String
  descriptionFr_starts_with: String
  descriptionFr_not_starts_with: String
  descriptionFr_ends_with: String
  descriptionFr_not_ends_with: String
  colour: String
  colour_not: String
  colour_in: [String!]
  colour_not_in: [String!]
  colour_lt: String
  colour_lte: String
  colour_gt: String
  colour_gte: String
  colour_contains: String
  colour_not_contains: String
  colour_starts_with: String
  colour_not_starts_with: String
  colour_ends_with: String
  colour_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  AND: [TeamScalarWhereInput!]
  OR: [TeamScalarWhereInput!]
  NOT: [TeamScalarWhereInput!]
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdateInput {
  nameEn: String
  nameFr: String
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  organization: OrganizationUpdateOneRequiredWithoutTeamsInput
  owner: ProfileUpdateOneWithoutOwnerOfTeamsInput
  members: ProfileUpdateManyWithoutTeamInput
  transferApproval: RequestedChangeUpdateOneWithoutOwnershipOfTeamInput
  supervisorApproval: RequestedChangeUpdateManyWithoutTeamInput
}

input TeamUpdateManyDataInput {
  nameEn: String
  nameFr: String
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
}

input TeamUpdateManyMutationInput {
  nameEn: String
  nameFr: String
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
}

input TeamUpdateManyWithoutOrganizationInput {
  create: [TeamCreateWithoutOrganizationInput!]
  delete: [TeamWhereUniqueInput!]
  connect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutOrganizationInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutOrganizationInput!]
  deleteMany: [TeamScalarWhereInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
}

input TeamUpdateManyWithoutOwnerInput {
  create: [TeamCreateWithoutOwnerInput!]
  delete: [TeamWhereUniqueInput!]
  connect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [TeamScalarWhereInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
}

input TeamUpdateManyWithWhereNestedInput {
  where: TeamScalarWhereInput!
  data: TeamUpdateManyDataInput!
}

input TeamUpdateOneWithoutMembersInput {
  create: TeamCreateWithoutMembersInput
  update: TeamUpdateWithoutMembersDataInput
  upsert: TeamUpsertWithoutMembersInput
  delete: Boolean
  disconnect: Boolean
  connect: TeamWhereUniqueInput
}

input TeamUpdateOneWithoutSupervisorApprovalInput {
  create: TeamCreateWithoutSupervisorApprovalInput
  update: TeamUpdateWithoutSupervisorApprovalDataInput
  upsert: TeamUpsertWithoutSupervisorApprovalInput
  delete: Boolean
  disconnect: Boolean
  connect: TeamWhereUniqueInput
}

input TeamUpdateOneWithoutTransferApprovalInput {
  create: TeamCreateWithoutTransferApprovalInput
  update: TeamUpdateWithoutTransferApprovalDataInput
  upsert: TeamUpsertWithoutTransferApprovalInput
  delete: Boolean
  disconnect: Boolean
  connect: TeamWhereUniqueInput
}

input TeamUpdateWithoutMembersDataInput {
  nameEn: String
  nameFr: String
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  organization: OrganizationUpdateOneRequiredWithoutTeamsInput
  owner: ProfileUpdateOneWithoutOwnerOfTeamsInput
  transferApproval: RequestedChangeUpdateOneWithoutOwnershipOfTeamInput
  supervisorApproval: RequestedChangeUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutOrganizationDataInput {
  nameEn: String
  nameFr: String
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  owner: ProfileUpdateOneWithoutOwnerOfTeamsInput
  members: ProfileUpdateManyWithoutTeamInput
  transferApproval: RequestedChangeUpdateOneWithoutOwnershipOfTeamInput
  supervisorApproval: RequestedChangeUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutOwnerDataInput {
  nameEn: String
  nameFr: String
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  organization: OrganizationUpdateOneRequiredWithoutTeamsInput
  members: ProfileUpdateManyWithoutTeamInput
  transferApproval: RequestedChangeUpdateOneWithoutOwnershipOfTeamInput
  supervisorApproval: RequestedChangeUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutSupervisorApprovalDataInput {
  nameEn: String
  nameFr: String
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  organization: OrganizationUpdateOneRequiredWithoutTeamsInput
  owner: ProfileUpdateOneWithoutOwnerOfTeamsInput
  members: ProfileUpdateManyWithoutTeamInput
  transferApproval: RequestedChangeUpdateOneWithoutOwnershipOfTeamInput
}

input TeamUpdateWithoutTransferApprovalDataInput {
  nameEn: String
  nameFr: String
  descriptionEn: String
  descriptionFr: String
  colour: String
  avatar: String
  organization: OrganizationUpdateOneRequiredWithoutTeamsInput
  owner: ProfileUpdateOneWithoutOwnerOfTeamsInput
  members: ProfileUpdateManyWithoutTeamInput
  supervisorApproval: RequestedChangeUpdateManyWithoutTeamInput
}

input TeamUpdateWithWhereUniqueWithoutOrganizationInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutOrganizationDataInput!
}

input TeamUpdateWithWhereUniqueWithoutOwnerInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutOwnerDataInput!
}

input TeamUpsertWithoutMembersInput {
  update: TeamUpdateWithoutMembersDataInput!
  create: TeamCreateWithoutMembersInput!
}

input TeamUpsertWithoutSupervisorApprovalInput {
  update: TeamUpdateWithoutSupervisorApprovalDataInput!
  create: TeamCreateWithoutSupervisorApprovalInput!
}

input TeamUpsertWithoutTransferApprovalInput {
  update: TeamUpdateWithoutTransferApprovalDataInput!
  create: TeamCreateWithoutTransferApprovalInput!
}

input TeamUpsertWithWhereUniqueWithoutOrganizationInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutOrganizationDataInput!
  create: TeamCreateWithoutOrganizationInput!
}

input TeamUpsertWithWhereUniqueWithoutOwnerInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutOwnerDataInput!
  create: TeamCreateWithoutOwnerInput!
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nameEn: String
  nameEn_not: String
  nameEn_in: [String!]
  nameEn_not_in: [String!]
  nameEn_lt: String
  nameEn_lte: String
  nameEn_gt: String
  nameEn_gte: String
  nameEn_contains: String
  nameEn_not_contains: String
  nameEn_starts_with: String
  nameEn_not_starts_with: String
  nameEn_ends_with: String
  nameEn_not_ends_with: String
  nameFr: String
  nameFr_not: String
  nameFr_in: [String!]
  nameFr_not_in: [String!]
  nameFr_lt: String
  nameFr_lte: String
  nameFr_gt: String
  nameFr_gte: String
  nameFr_contains: String
  nameFr_not_contains: String
  nameFr_starts_with: String
  nameFr_not_starts_with: String
  nameFr_ends_with: String
  nameFr_not_ends_with: String
  descriptionEn: String
  descriptionEn_not: String
  descriptionEn_in: [String!]
  descriptionEn_not_in: [String!]
  descriptionEn_lt: String
  descriptionEn_lte: String
  descriptionEn_gt: String
  descriptionEn_gte: String
  descriptionEn_contains: String
  descriptionEn_not_contains: String
  descriptionEn_starts_with: String
  descriptionEn_not_starts_with: String
  descriptionEn_ends_with: String
  descriptionEn_not_ends_with: String
  descriptionFr: String
  descriptionFr_not: String
  descriptionFr_in: [String!]
  descriptionFr_not_in: [String!]
  descriptionFr_lt: String
  descriptionFr_lte: String
  descriptionFr_gt: String
  descriptionFr_gte: String
  descriptionFr_contains: String
  descriptionFr_not_contains: String
  descriptionFr_starts_with: String
  descriptionFr_not_starts_with: String
  descriptionFr_ends_with: String
  descriptionFr_not_ends_with: String
  colour: String
  colour_not: String
  colour_in: [String!]
  colour_not_in: [String!]
  colour_lt: String
  colour_lte: String
  colour_gt: String
  colour_gte: String
  colour_contains: String
  colour_not_contains: String
  colour_starts_with: String
  colour_not_starts_with: String
  colour_ends_with: String
  colour_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  organization: OrganizationWhereInput
  owner: ProfileWhereInput
  members_every: ProfileWhereInput
  members_some: ProfileWhereInput
  members_none: ProfileWhereInput
  transferApproval: RequestedChangeWhereInput
  supervisorApproval_every: RequestedChangeWhereInput
  supervisorApproval_some: RequestedChangeWhereInput
  supervisorApproval_none: RequestedChangeWhereInput
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
}
